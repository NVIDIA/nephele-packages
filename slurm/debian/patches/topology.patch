From 6a1dd05afa749fd51f9c4d49af76f4c03999423b Mon Sep 17 00:00:00 2001
From: Felix Abecassis <fabecassis@nvidia.com>
Date: Tue, 18 Aug 2020 08:41:26 -0700
Subject: [PATCH] topology/tree: assign a unique rank to nodes on the same leaf
 switch

Bug 9521

Signed-off-by: Felix Abecassis <fabecassis@nvidia.com>
---
 src/plugins/topology/tree/topology_tree.c | 35 +++++++++++++++++++++--
 1 file changed, 33 insertions(+), 2 deletions(-)

diff --git a/src/plugins/topology/tree/topology_tree.c b/src/plugins/topology/tree/topology_tree.c
index 7ac46f34f6..5d3200fdfb 100644
--- a/src/plugins/topology/tree/topology_tree.c
+++ b/src/plugins/topology/tree/topology_tree.c
@@ -3,6 +3,7 @@
  *	switch topology
  *****************************************************************************
  *  Copyright (C) 2009 Lawrence Livermore National Security.
+ *  Copyright (C) 2020 NVIDIA CORPORATION.
  *  Produced at Lawrence Livermore National Laboratory (cf, DISCLAIMER).
  *  Written by Morris Jette <jette1@llnl.gov>
  *  CODE-OCEC-09-009. All rights reserved.
@@ -155,11 +156,41 @@ extern int topo_build_config(void)
 }
 
 /*
- * topo_generate_node_ranking  -  this plugin does not set any node_rank fields
+ * topo_generate_node_ranking  -  this plugin assigns a unique node_rank
+ *      for all nodes belonging to the same leaf switch
  */
 extern bool topo_generate_node_ranking(void)
 {
-	return false;
+	/* By default, node_rank is 0, so start at 1 */
+	int switch_rank = 1;
+
+	/* Build a temporary topology to be able to find the leaf switches. */
+	_validate_switches();
+
+	if (switch_record_cnt == 0) {
+		_free_switch_record_table();
+		return false;
+	}
+
+	for (int sw = 0; sw < switch_record_cnt; sw++) {
+		if (switch_record_table[sw].level != 0) /* not a leaf switch */
+			continue;
+
+		for (int n = 0; n < node_record_count; n++) {
+			if (!bit_test(switch_record_table[sw].node_bitmap, n))
+				continue;
+			node_record_table_ptr[n].node_rank = switch_rank;
+			info("topo_generate_node_ranking: node=%s rank=%d",
+			     node_record_table_ptr[n].name, switch_rank);
+		}
+
+		switch_rank++;
+	}
+
+	/* Discard the temporary topology since it is using node bitmaps */
+	_free_switch_record_table();
+
+	return true;
 }
 
 /*
-- 
2.25.1

